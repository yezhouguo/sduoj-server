/*
 * This file was generated by the Gradle 'init' task.
 */
plugins {
    `java-library`
    `maven-publish`
    id("org.springframework.boot")
    id("io.spring.dependency-management")
}

group = "cn.edu.sdu.qd.oj"
version = Versions.sduoj
java.sourceCompatibility = JavaVersion.VERSION_1_8
java.targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    maven { url = uri("https://maven.aliyun.com/repository/public/") }
    maven { url = uri("https://maven.aliyun.com/repository/spring/") }
    mavenLocal()
//    mavenCentral()
}

dependencies {
    compileOnly("org.projectlombok:lombok:${Versions.lombok}")
    annotationProcessor("org.projectlombok:lombok:${Versions.lombok}")
    testCompileOnly("org.projectlombok:lombok:${Versions.lombok}")
    testAnnotationProcessor("org.projectlombok:lombok:${Versions.lombok}")
    annotationProcessor("org.mapstruct:mapstruct-processor:${Versions.mapstruct}")
    testAnnotationProcessor("org.mapstruct:mapstruct-processor:${Versions.mapstruct}")
}

dependencyManagement {
    imports {
        mavenBom("org.springframework.cloud:spring-cloud-dependencies:${Versions.springCloud}")
        mavenBom("com.alibaba.cloud:spring-cloud-alibaba-dependencies:${Versions.springCloudAlibaba}")
    }
    dependencies {
        dependency("org.apache.commons:commons-lang3:${Versions.commonsLang3}")
        dependency("org.mybatis.spring.boot:mybatis-spring-boot-starter:${Versions.mybatisStarter}")
        dependency("mysql:mysql-connector-java:${Versions.mysql}")
        dependency("com.baomidou:mybatis-plus-boot-starter:${Versions.mybatisPlus}")
        dependency("org.mapstruct:mapstruct:${Versions.mapstruct}")
        dependency("org.mapstruct:mapstruct-processor:${Versions.mapstruct}")
        dependency("com.alibaba:fastjson:${Versions.fastjson}") // TODO: remove fastjson from this project
        dependency("com.google.guava:guava:${Versions.guava}")
        dependency("com.alibaba:easyexcel:${Versions.easyexcel}")
        dependency("javax.validation:validation-api:${Versions.javaxValidation}")
        dependency("org.hibernate.validator:hibernate-validator:${Versions.hibernate}")
        dependency("org.apache.commons:commons-pool2:${Versions.commonsPool}")
        dependency("cn.hutool:hutool-core:${Versions.hutool}")
        dependency("com.github.ben-manes.caffeine:caffeine:${Versions.caffeine}")
        dependency("org.javassist:javassist:${Versions.javassist}")
        dependency("org.slf4j:slf4j-api:${Versions.slf4j}")
        dependency("org.slf4j:slf4j-nop:${Versions.slf4j}")
        dependency("com.fasterxml.jackson.core:jackson-core:${Versions.jackson}")
        dependency("com.fasterxml.jackson.core:jackson-databind:${Versions.jackson}")
        dependency("commons-codec:commons-codec:${Versions.commonsCodec}")
        dependency("io.github.openfeign:feign-jackson:${Versions.feignJackson}")
        dependency("io.netty:netty-buffer:${Versions.netty}")
        dependency("junit:junit:${Versions.junit}")
        dependency("org.apache.httpcomponents:httpclient:${Versions.httpclient}")
        dependency("org.apache.logging.log4j:log4j-to-slf4j:${Versions.log4j}")
        dependency("org.apache.logging.log4j:log4j-api:${Versions.log4j}")
        dependency("org.apache.logging.log4j:log4j-core:${Versions.log4j}")
    }
}

// 定义 service 工程和 interface 工程的区别, service 工程需要打成 Jar 包不需要发布, interface 则相反
allprojects {
    val projectName = this.name
    val isService = projectName.contains(Regex("-(service|gateway|websocket)$"))
    if (isService) {
        tasks.bootJar {
            enabled = true
            archiveName = projectName.replace("-service", "") + ".jar"
        }
        tasks.jar {
            enabled = false
        }
    } else {
        tasks.bootJar {
            enabled = false
        }
        tasks.jar {
            enabled = true
        }
        publishing {
            val GITHUB_ACTOR = System.getenv("GITHUB_ACTOR")
            val GITHUB_TOKEN = System.getenv("GITHUB_TOKEN")
            val REPO = System.getenv("GITHUB_REPOSITORY")
            println(GITHUB_ACTOR)
            println(REPO)
            GITHUB_TOKEN?.run {
                println("runn")
                repositories {
                    maven {
                        name = "GitHubPackages"
                        url = uri("https://maven.pkg.github.com/${REPO}")
                        credentials {
                            username = GITHUB_ACTOR
                            password = GITHUB_TOKEN
                        }
                    }
                }
            }
            publications.create<MavenPublication>("maven") {
                artifact(tasks.jar)
            }
        }
    }
}

tasks.withType<JavaCompile>() {
    options.encoding = "UTF-8"
}
